// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // C Instruction components:
    // 15 - i
    // 14 - x
    // 13 - x
    // 12 - a - 0 = A, 1 = M for ALU
    // 11 - c1 ALU bits
    // 10 - c2
    // 9  - c3
    // 8  - c4
    // 7  - c5
    // 6  - c6
    // 5  - d1 - 1 = save in A
    // 4  - d2 - 1 = save in D
    // 3  - d3 - 1 = save in M
    // 2  - j1 - jump bits = jump if less than zero
    // 1  - j2 = jump if zero
    // 0  - j3 = jump if greater than zero
    PARTS:
    // if a instruction load instruction into A resister
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=muxToAReg);

    // ARegister
    // convert a instruction 0 to save into ARegister
    Not(in=instruction[15], out=loadA);
    Or(a=loadA, b=instruction[5], out=saveA);
    ARegister(in=muxToAReg, load=saveA, out=aRegister, out[0..14]=addressM);

    // selects ARegister or inM to pass to ALU
    Mux16(a=aRegister, b=inM, sel=instruction[12], out=muxToALU);

    // selects whether to save aluOutput in DRegister or not
    // C instruction AND d2
    And(a=instruction[15], b=instruction[4], out=saveD);
    DRegister(in=aluOut, load=saveD, out=dRegister);

    ALU(x=dRegister, y=muxToALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluZr, ng=aluNg);

    // should the output be saved in M memory
    // C instruction AND d3
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Program Counter - Which instruction to fetch next

    // ALU control bits:
    // aluZr - was output of ALU 0
    // aluNg - was output of ALU negative

    // should load (i.e. jump) if:
    // aluZr & j2 OR
    // aluNg & j1 OR
    // j3 & not(aluZr) & not(aluNg) AND
    // a C instruction
    And(a=aluZr, b=instruction[1], out=jumpZr);
    And(a=aluNg, b=instruction[2], out=jumpLt);
    Not(in=aluNg, out=notNg);
    Not(in=aluZr, out=notZr);
    And(a=notNg, b=notZr, out=aluGt);
    And(a=aluGt, b=instruction[0], out=jumpGt);
    Or(a=jumpZr, b=jumpLt, out=ltOrZr);
    Or(a=ltOrZr, b=jumpGt, out=shouldJmp);
    And(a=shouldJmp, b=instruction[15], out=load);

    // should inc if:
    // not(reset) & not(load)
    Not(in=load, out=notLoad);
    Not(in=reset, out=notReset);
    And(a=notReset, b=notLoad, out=inc);
    PC(in=aRegister, load=load, inc=inc, reset=reset, out[0..14]=pc);
}