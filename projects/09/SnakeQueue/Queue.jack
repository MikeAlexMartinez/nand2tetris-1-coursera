/**
 * Queue data structure represents the body of the snake
 * the front of the queue represents the tail with one item
 * being removed when as the snake moves. The head of the snake
 * is the back of the queue which is added to each movement
 */
class Queue {
 
  // the queue body is array of 2-d arrays
  // e.g. [[1, 2], [3, 4], ... , [5, 6]]
  field Array body;
  field int length;

  // assign memory for queue as array with provided max length
  constructor Queue new(int maxLength) {
    let length = 0;
    let body = Array.new(maxLength);
    return this;
  }

  method void dispose() {
    var int start;
    var Array segment;
    
    let start = 0;
    while(~(start < length)) {
      let segment = body[start];
      do segment.dispose();
      let start = start + 1;
    }

    do body.dispose();
    do Memory.deAlloc(this);
    return;
  }

  // Add head to back of queue
  method void pushHead(Array block) {
    let body[length] = block;
    let length = length + 1;
    return;
  }

  // take tail from front of queue
  method Array takeTail() {
    var int start;
    var Array tail;

    // assign front of queue to tail
    let tail = Array.new(2);
    let tail = body[0];

    // move each element in the queue forward
    let start = 1;
    while(~(start = length)) {
      let body[start - 1] = body[start];
      let start = start + 1;
    }

    // reduce length of queue by 1
    let length = length - 1;

    // return tail
    return tail;
  }
}