
/**
 *  This graphical class is responsible for updating the grid
 *  of the game.
 *  accessible grid for snake consists of 16x16px blocks.
 *  These blocks are 14 rows high (rows 1 to 14)
 *  And 22 rows across (columns 9 to 30)
 *  rows 0 and 15 are walls, as are columns 8 and 31.
 */
class Grid {

  field int height;
  field int width;

  constructor Grid new() {
    do drawGrid();
    do setFood();
    return this;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /* draw outline of grid and clear menu from centre */
  method void drawGrid() {
    do drawVertical(-1, 8); // Left side
    do drawVertical(-1, 31); // right side
    do drawHorizontal(-1, 0, 9, 22, 16); // top side
    do drawHorizontal(-1, 240, 9, 22, 16); // bottom side
    do drawHorizontal(0, 16, 9, 22, 16*14); // clear contents
    return;
  }

  /* clear contents of grid */
  method void clearGrid() {
    do drawHorizontal(0, 16, 9, 22, 16*14); // clear contents
    return;
  }

  /**
   * returns int that represents whether snake will encounter
   * an object when completing next move.
   * 0 = nothing
   * 1 = tail
   * 2 = wall
   * 3 = food
   */
  method int detectCollision(Array head) {
    var int collision, col, row;
    var boolean hasSnake, hasFood;

    let collision = 0;
    let col = head[0];
    let row = head[1];

    // if col or row outside grid boundary return 2
    if ((col = 8)
      | (col = 31)
      | (row = 0)
      | (row = 15)
    ) {
      let collision = 2;
    } else { // Still in Grid
      let hasSnake = cellHasSnake(col, row);
      if (hasSnake) {
        let collision = 1;
      } else {
        let hasFood = cellHasFood(col, row);
        if (hasFood) {
          let collision = 3;
        }
      }
    }

    return collision;
  }

  /**
   * Draws the next position of the snakes head
   */
  method void updateHead(Array head) {
    do updateBlock(head[0], head[1], -1);
    return;
  }

  /**
   * This functions clears the block where the tail
   * Is currently
   */
  method void updateTail(Array tail) {
    do updateBlock(tail[0], tail[1], 0);
    return;
  }

  /**
   * Updates all rows of target block with value provided
   */
  method void updateBlock(int col, int row, int val) {
    var int memAddress;
    let row = row * 16 * 32;
    let col = col;
    let memAddress = 16384 + col + row;
    do Memory.poke(memAddress, val);
    do Memory.poke(memAddress + 32, val);
    do Memory.poke(memAddress + 64, val);
    do Memory.poke(memAddress + 96, val);
    do Memory.poke(memAddress + 128, val);
    do Memory.poke(memAddress + 160, val);
    do Memory.poke(memAddress + 192, val);
    do Memory.poke(memAddress + 224, val);
    do Memory.poke(memAddress + 256, val);
    do Memory.poke(memAddress + 288, val);
    do Memory.poke(memAddress + 320, val);
    do Memory.poke(memAddress + 352, val);
    do Memory.poke(memAddress + 384, val);
    do Memory.poke(memAddress + 416, val);
    do Memory.poke(memAddress + 448, val);
    do Memory.poke(memAddress + 480, val);
    return;
  }

  /**
   * randomly generate a piece of food
   * and add to grid.
   */
  method void setFood() {
    var int col, row;
    var boolean hasSnake;
    var boolean foodDrawn;

    let foodDrawn = false;
    let hasSnake = false;
    while(~(foodDrawn)) {
      // generate location using randRange
      let col = LCGRandom.randRange(9, 30);
      let row = LCGRandom.randRange(1, 14);
      // if selected range has snake, regenerate
      let hasSnake = cellHasSnake(col, row);
      // drawFood if block is snake free
      if (~(hasSnake)) {
        do drawFood(col, row);
        let foodDrawn = true;
      }
    }
    return;
  }

  /** 
   * check if first row of block has a value which
   * matches that of a piece of food
   */
  method boolean cellHasFood(int col, int row) {
    var int val;
    let val = peekAtBlock(col, row);
    return (val = 6168);
  }

  /** 
   * check if first row of block has a value which
   * matches that of a snake
   */
  method boolean cellHasSnake(int col, int row) {
    var int val;
    let val = peekAtBlock(col, row);
    return (val = -1);
  }

  /* check the current value in the target block */
  method int peekAtBlock(int col, int row) {
    var int memAddress, val;
    let row = row * 16 * 32;
    let col = col;
    let memAddress = 16384 + col + row;
    return Memory.peek(memAddress);
  }

  /* Draws the next piece of food in the required location */
  method void drawFood(int col, int row) {
    var int memAddress;
    let memAddress = 16384 + col + (row * 16 * 32);
    do Memory.poke(memAddress, 6168);
    do Memory.poke(memAddress + 32, 9252);
    do Memory.poke(memAddress + 64, 23130);
    do Memory.poke(memAddress + 96, -23131);
    do Memory.poke(memAddress + 128, -21931);
    do Memory.poke(memAddress + 160, 21930);
    do Memory.poke(memAddress + 192, 10836);
    do Memory.poke(memAddress + 224, 5544);
    do Memory.poke(memAddress + 256, 5544);
    do Memory.poke(memAddress + 288, 10836);
    do Memory.poke(memAddress + 320, 21930);
    do Memory.poke(memAddress + 352, -21931);
    do Memory.poke(memAddress + 384, -23131);
    do Memory.poke(memAddress + 416, 23130);
    do Memory.poke(memAddress + 448, 9252);
    do Memory.poke(memAddress + 480, 6168);
    return;
  }

  /* draw the sides of the snake container */
  method void drawVertical(int value, int column) {
    var int memAddress, start, end;
    var int increment, diff;

    let memAddress = 16384 + column;
    let start = 0;
    let end = 255;
    let increment = 32;
    let diff = start * increment;

    while(~(start > end)) {
      do Memory.poke(memAddress + diff, value);
      let start = start + 1;
      let diff = diff + increment;
    }

    return;
  }

  /* Draws the top and bottom edges of the grid */
  method void drawHorizontal(int value, int row, int colStart, int cols, int height) {
    var int memAddress; // active memory address
    var int start, end; // number of rows
    var int col, colEnd; // number of columns

    let start = row;
    let end = start + height;
    let col = colStart;
    let colEnd = col + cols;

    // do column
    while(~(start = end)) {
      let memAddress = 16384 + col + (32 * start) - 1;

      // do row
      while(~(col = colEnd)) {
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress, value);
        let col = col + 1;
      }

      // reset column
      let col = colStart;

      // increment starting point
      let start = start + 1;
    }

    return;
  }
}