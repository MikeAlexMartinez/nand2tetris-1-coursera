/**
 * These are the sprites associated with my own font
 */
class Alphabet {

  field int memAddress; // keeps memAddress stored

  constructor Alphabet new() {
    return this;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /* Draws a string of characters beginning at provided location */
  method void drawString(String s, int location) {
    var int length, i;
    var char letter;

    let i = 0;
    while (~(i = s.length())) {
      let i = i + 1;
      let location = location + i;
      let letter = s.charAt(i);
      do draw(location, letter);
    }

    return;
  }

  method void draw(int location, char letter) {
    let memAddress = 16384 + location;
    do Memory.poke(memAddress, 0);
    if (letter = 97 | letter = 65) { do a(); } // Upper or lowercase A
    if (letter = 98 | letter = 66) { do b(); }  // Upper or lowercase B
    if (letter = 99 | letter = 67) { do c(); }  // Upper or lowercase C
    if (letter = 100 | letter = 68) { do d(); }  // Upper or lowercase D
    if (letter = 101 | letter = 69) { do e(); }  // Upper or lowercase E
    if (letter = 102 | letter = 70) { do f(); }  // Upper or lowercase F
    if (letter = 103 | letter = 71) { do g(); }  // Upper or lowercase G
    if (letter = 104 | letter = 72) { do h(); }  // Upper or lowercase H
    if (letter = 105 | letter = 73) { do i(); }  // Upper or lowercase I
    if (letter = 106 | letter = 74) { do j(); }  // Upper or lowercase J
    if (letter = 107 | letter = 75) { do k(); }  // Upper or lowercase K
    if (letter = 108 | letter = 76) { do l(); }  // Upper or lowercase L
    if (letter = 109 | letter = 77) { do m(); }  // Upper or lowercase M
    if (letter = 110 | letter = 78) { do n(); }  // Upper or lowercase N
    if (letter = 111 | letter = 79) { do o(); }  // Upper or lowercase O
    if (letter = 112 | letter = 80) { do p(); }  // Upper or lowercase P
    if (letter = 113 | letter = 81) { do q(); }  // Upper or lowercase Q
    if (letter = 114 | letter = 82) { do r(); }  // Upper or lowercase R
    if (letter = 115 | letter = 83) { do s(); }  // Upper or lowercase S
    if (letter = 116 | letter = 84) { do t(); }  // Upper or lowercase T
    if (letter = 117 | letter = 85) { do u(); }  // Upper or lowercase U
    if (letter = 118 | letter = 86) { do v(); }  // Upper or lowercase V
    if (letter = 119 | letter = 87) { do w(); }  // Upper or lowercase W
    if (letter = 120 | letter = 88) { do x(); }  // Upper or lowercase X
    if (letter = 121 | letter = 89) { do y(); }  // Upper or lowercase Y
    if (letter = 122 | letter = 90) { do z(); }  // Upper or lowercase Z
    if (letter = 48) { do _0(); }
    if (letter = 49) { do _1(); }
    if (letter = 50) { do _2(); }
    if (letter = 51) { do _3(); }
    if (letter = 52) { do _4(); }
    if (letter = 53) { do _5(); }
    if (letter = 54) { do _6(); }
    if (letter = 55) { do _7(); }
    if (letter = 56) { do _8(); }
    if (letter = 57) { do _9(); }
    do Memory.poke(memAddress+480, 0);
    return;
  }

  /* draw an A */
  method void a() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 24582);
    do Memory.poke(memAddress+224, 32766);
    do Memory.poke(memAddress+256, 32766);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 24582);
    do Memory.poke(memAddress+416, 24582);
    do Memory.poke(memAddress+448, 24582);
    return;
  }

  /* draw a B */
  method void b() {
    do Memory.poke(memAddress+32, 8190);
    do Memory.poke(memAddress+64, 16382);
    do Memory.poke(memAddress+96, 28678);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 28678);
    do Memory.poke(memAddress+224, 16382);
    do Memory.poke(memAddress+256, 16382);
    do Memory.poke(memAddress+288, 28678);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28678);
    do Memory.poke(memAddress+416, 16382);
    do Memory.poke(memAddress+448, 8190);
    return;
  }

  /* draw a C */
  method void c() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 6);
    do Memory.poke(memAddress+224, 6);
    do Memory.poke(memAddress+256, 6);
    do Memory.poke(memAddress+288, 6);
    do Memory.poke(memAddress+320, 6);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a D */
  method void d() {
    do Memory.poke(memAddress+32, 8190);
    do Memory.poke(memAddress+64, 16382);
    do Memory.poke(memAddress+96, 28678);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 24582);
    do Memory.poke(memAddress+224, 24582);
    do Memory.poke(memAddress+256, 24582);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28678);
    do Memory.poke(memAddress+416, 16382);
    do Memory.poke(memAddress+448, 8190);
    return;
  }

  /* draw an E */
  method void e() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 6);
    do Memory.poke(memAddress+128, 6);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 6);
    do Memory.poke(memAddress+224, 8190);
    do Memory.poke(memAddress+256, 8190);
    do Memory.poke(memAddress+288, 6);
    do Memory.poke(memAddress+320, 6);
    do Memory.poke(memAddress+352, 6);
    do Memory.poke(memAddress+384, 6);
    do Memory.poke(memAddress+416, 32766);
    do Memory.poke(memAddress+448, 32766);
    return;
  }

  /* draw an F */
  method void f() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 6);
    do Memory.poke(memAddress+128, 6);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 6);
    do Memory.poke(memAddress+224, 8190);
    do Memory.poke(memAddress+256, 8190);
    do Memory.poke(memAddress+288, 6);
    do Memory.poke(memAddress+320, 6);
    do Memory.poke(memAddress+352, 6);
    do Memory.poke(memAddress+384, 6);
    do Memory.poke(memAddress+416, 6);
    do Memory.poke(memAddress+448, 6);
    return;
  }

  /* draw a G */
  method void g() {
    do Memory.poke(memAddress+32, 4088);
    do Memory.poke(memAddress+64, 8188);
    do Memory.poke(memAddress+96, 14350);
    do Memory.poke(memAddress+128, 12294);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 6);
    do Memory.poke(memAddress+224, 6);
    do Memory.poke(memAddress+256, 6);
    do Memory.poke(memAddress+288, 30726);
    do Memory.poke(memAddress+320, 30726);
    do Memory.poke(memAddress+352, 12294);
    do Memory.poke(memAddress+384, 14350);
    do Memory.poke(memAddress+416, 8188);
    do Memory.poke(memAddress+448, 4088);
    return;
  }

  /* draw a H */
  method void h() {
    do Memory.poke(memAddress+32, 24582);
    do Memory.poke(memAddress+64, 24582);
    do Memory.poke(memAddress+96, 24582);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 24582);
    do Memory.poke(memAddress+224, 32766);
    do Memory.poke(memAddress+256, 32766);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 24582);
    do Memory.poke(memAddress+416, 24582);
    do Memory.poke(memAddress+448, 24582);
    return;
  }

  /* draw an I */
  method void i() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 384);
    do Memory.poke(memAddress+128, 384);
    do Memory.poke(memAddress+160, 384);
    do Memory.poke(memAddress+192, 384);
    do Memory.poke(memAddress+224, 384);
    do Memory.poke(memAddress+256, 384);
    do Memory.poke(memAddress+288, 384);
    do Memory.poke(memAddress+320, 384);
    do Memory.poke(memAddress+352, 384);
    do Memory.poke(memAddress+384, 384);
    do Memory.poke(memAddress+416, 32766);
    do Memory.poke(memAddress+448, 32766);
    return;
  }

  /* draw a J */
  method void j() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 24576);
    do Memory.poke(memAddress+128, 24576);
    do Memory.poke(memAddress+160, 24576);
    do Memory.poke(memAddress+192, 24576);
    do Memory.poke(memAddress+224, 24576);
    do Memory.poke(memAddress+256, 24576);
    do Memory.poke(memAddress+288, 24576);
    do Memory.poke(memAddress+320, 24576);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a K */
  method void k() {
    do Memory.poke(memAddress+32, 14342);
    do Memory.poke(memAddress+64, 7174);
    do Memory.poke(memAddress+96, 3590);
    do Memory.poke(memAddress+128, 1798);
    do Memory.poke(memAddress+160, 902);
    do Memory.poke(memAddress+192, 462);
    do Memory.poke(memAddress+224, 254);
    do Memory.poke(memAddress+256, 510);
    do Memory.poke(memAddress+288, 910);
    do Memory.poke(memAddress+320, 1798);
    do Memory.poke(memAddress+352, 3590);
    do Memory.poke(memAddress+384, 7174);
    do Memory.poke(memAddress+416, 14342);
    do Memory.poke(memAddress+448, 28678);
    return;
  }

  /* draw an L */
  method void l() {
    do Memory.poke(memAddress+32, 6);
    do Memory.poke(memAddress+64, 6);
    do Memory.poke(memAddress+96, 6);
    do Memory.poke(memAddress+128, 6);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 6);
    do Memory.poke(memAddress+224, 6);
    do Memory.poke(memAddress+256, 6);
    do Memory.poke(memAddress+288, 6);
    do Memory.poke(memAddress+320, 6);
    do Memory.poke(memAddress+352, 6);
    do Memory.poke(memAddress+384, 6);
    do Memory.poke(memAddress+416, 32766);
    do Memory.poke(memAddress+448, 32766);
    return;
  }

  /* draw an M */
  method void m() {
    do Memory.poke(memAddress+32, 7414);
    do Memory.poke(memAddress+64, 16382);
    do Memory.poke(memAddress+96, 30622);
    do Memory.poke(memAddress+128, 25358);
    do Memory.poke(memAddress+160, 25350);
    do Memory.poke(memAddress+192, 25350);
    do Memory.poke(memAddress+224, 25350);
    do Memory.poke(memAddress+256, 25350);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 24582);
    do Memory.poke(memAddress+416, 24582);
    do Memory.poke(memAddress+448, 24582);
    return;
  }

  /* draw a N */
  method void n() {
    do Memory.poke(memAddress+32, 24582);
    do Memory.poke(memAddress+64, 24590);
    do Memory.poke(memAddress+96, 24606);
    do Memory.poke(memAddress+128, 24638);
    do Memory.poke(memAddress+160, 24694);
    do Memory.poke(memAddress+192, 24806);
    do Memory.poke(memAddress+224, 25030);
    do Memory.poke(memAddress+256, 25478);
    do Memory.poke(memAddress+288, 26374);
    do Memory.poke(memAddress+320, 28166);
    do Memory.poke(memAddress+352, 31750);
    do Memory.poke(memAddress+384, 30726);
    do Memory.poke(memAddress+416, 28678);
    do Memory.poke(memAddress+448, 24582);
    return;
  }

  /* draw a O */
  method void o() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 24582);
    do Memory.poke(memAddress+224, 24582);
    do Memory.poke(memAddress+256, 24582);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a P */
  method void p() {
    do Memory.poke(memAddress+32, 8190);
    do Memory.poke(memAddress+64, 16382);
    do Memory.poke(memAddress+96, 28678);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 28678);
    do Memory.poke(memAddress+224, 16382);
    do Memory.poke(memAddress+256, 8190);
    do Memory.poke(memAddress+288, 6);
    do Memory.poke(memAddress+320, 6);
    do Memory.poke(memAddress+352, 6);
    do Memory.poke(memAddress+384, 6);
    do Memory.poke(memAddress+416, 6);
    do Memory.poke(memAddress+448, 6);
    return;
  }

  /* draw a Q */
  method void q() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 24582);
    do Memory.poke(memAddress+224, 24582);
    do Memory.poke(memAddress+256, 24582);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 28678);
    do Memory.poke(memAddress+352, 14342);
    do Memory.poke(memAddress+384, 15374);
    do Memory.poke(memAddress+416, 28668);
    do Memory.poke(memAddress+448, 26616);
    return;
  }

  /* draw a R */
  method void r() {
    do Memory.poke(memAddress+32, 8190);
    do Memory.poke(memAddress+64, 16382);
    do Memory.poke(memAddress+96, 28678);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 12294);
    do Memory.poke(memAddress+224, 16382);
    do Memory.poke(memAddress+256, 32766);
    do Memory.poke(memAddress+288, 28678);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 24582);
    do Memory.poke(memAddress+416, 24582);
    do Memory.poke(memAddress+448, 24582);
    return;
  }

  /* draw a S */
  method void s() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 14);
    do Memory.poke(memAddress+224, 8188);
    do Memory.poke(memAddress+256, 16376);
    do Memory.poke(memAddress+288, 28672);
    do Memory.poke(memAddress+320, 24576);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a T */
  method void t() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 384);
    do Memory.poke(memAddress+128, 384);
    do Memory.poke(memAddress+160, 384);
    do Memory.poke(memAddress+192, 384);
    do Memory.poke(memAddress+224, 384);
    do Memory.poke(memAddress+256, 384);
    do Memory.poke(memAddress+288, 384);
    do Memory.poke(memAddress+320, 384);
    do Memory.poke(memAddress+352, 384);
    do Memory.poke(memAddress+384, 384);
    do Memory.poke(memAddress+416, 384);
    do Memory.poke(memAddress+448, 384);
    return;
  }

  /* draw a U */
  method void u() {
    do Memory.poke(memAddress+32, 24582);
    do Memory.poke(memAddress+64, 24582);
    do Memory.poke(memAddress+96, 24582);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 24582);
    do Memory.poke(memAddress+224, 24582);
    do Memory.poke(memAddress+256, 24582);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a v */
  method void v() {
    do Memory.poke(memAddress+32, 24582);
    do Memory.poke(memAddress+64, 24582);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 28686);
    do Memory.poke(memAddress+160, 12300);
    do Memory.poke(memAddress+192, 12300);
    do Memory.poke(memAddress+224, 14364);
    do Memory.poke(memAddress+256, 6168);
    do Memory.poke(memAddress+288, 7224);
    do Memory.poke(memAddress+320, 3120);
    do Memory.poke(memAddress+352, 3696);
    do Memory.poke(memAddress+384, 2016);
    do Memory.poke(memAddress+416, 960);
    do Memory.poke(memAddress+448, 384);
    return;
  }

  /* draw a W */
  method void w() {
    do Memory.poke(memAddress+32, 24582);
    do Memory.poke(memAddress+64, 24582);
    do Memory.poke(memAddress+96, 24582);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24582);
    do Memory.poke(memAddress+192, 24582);
    do Memory.poke(memAddress+224, 24582);
    do Memory.poke(memAddress+256, 24966);
    do Memory.poke(memAddress+288, 24966);
    do Memory.poke(memAddress+320, 24966);
    do Memory.poke(memAddress+352, 24966);
    do Memory.poke(memAddress+384, 29646);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 7800);
    return;
  }

  /* draw a X */
  method void x() {
    do Memory.poke(memAddress+32, 24582);
    do Memory.poke(memAddress+64, 24582);
    do Memory.poke(memAddress+96, 24582);
    do Memory.poke(memAddress+128, 28686);
    do Memory.poke(memAddress+160, 14364);
    do Memory.poke(memAddress+192, 7224);
    do Memory.poke(memAddress+224, 4080);
    do Memory.poke(memAddress+256, 4080);
    do Memory.poke(memAddress+288, 7224);
    do Memory.poke(memAddress+320, 14364);
    do Memory.poke(memAddress+352, 28686);
    do Memory.poke(memAddress+384, 24582);
    do Memory.poke(memAddress+416, 24582);
    do Memory.poke(memAddress+448, 24582);
    return;
  }

  /* draw the letter Y */
  method void y() {
    do Memory.poke(memAddress+32, 24582);
    do Memory.poke(memAddress+64, 24582);
    do Memory.poke(memAddress+96, 24582);
    do Memory.poke(memAddress+128, 28686);
    do Memory.poke(memAddress+160, 14364);
    do Memory.poke(memAddress+192, 7224);
    do Memory.poke(memAddress+224, 3696);
    do Memory.poke(memAddress+256, 2016);
    do Memory.poke(memAddress+288, 960);
    do Memory.poke(memAddress+320, 384);
    do Memory.poke(memAddress+352, 384);
    do Memory.poke(memAddress+384, 384);
    do Memory.poke(memAddress+416, 384);
    do Memory.poke(memAddress+448, 384);
    return;
  }

  /* draw the letter Z */
  method void z() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 14336);
    do Memory.poke(memAddress+128, 7168);
    do Memory.poke(memAddress+160, 3584);
    do Memory.poke(memAddress+192, 1792);
    do Memory.poke(memAddress+224, 896);
    do Memory.poke(memAddress+256, 448);
    do Memory.poke(memAddress+288, 224);
    do Memory.poke(memAddress+320, 112);
    do Memory.poke(memAddress+352, 56);
    do Memory.poke(memAddress+384, 28);
    do Memory.poke(memAddress+416, 32766);
    do Memory.poke(memAddress+448, 32766);
    return;
  }

  /* draw a hyphen : */
  method void hyphen() {
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 960);
    do Memory.poke(memAddress+96, 960);
    do Memory.poke(memAddress+128, 960);
    do Memory.poke(memAddress+160, 960);
    do Memory.poke(memAddress+192, 0);
    do Memory.poke(memAddress+224, 0);
    do Memory.poke(memAddress+256, 0);
    do Memory.poke(memAddress+288, 0);
    do Memory.poke(memAddress+320, 960);
    do Memory.poke(memAddress+352, 960);
    do Memory.poke(memAddress+384, 960);
    do Memory.poke(memAddress+416, 960);
    do Memory.poke(memAddress+448, 0);
    return;
  }

  /* draw an exclamation ! */
  method void exclamation() {
    do Memory.poke(memAddress+32, 960);
    do Memory.poke(memAddress+64, 960);
    do Memory.poke(memAddress+96, 960);
    do Memory.poke(memAddress+128, 960);
    do Memory.poke(memAddress+160, 960);
    do Memory.poke(memAddress+192, 960);
    do Memory.poke(memAddress+224, 960);
    do Memory.poke(memAddress+256, 960);
    do Memory.poke(memAddress+288, 384);
    do Memory.poke(memAddress+320, 384);
    do Memory.poke(memAddress+352, 0);
    do Memory.poke(memAddress+384, 960);
    do Memory.poke(memAddress+416, 960);
    do Memory.poke(memAddress+448, 960);
    return;
  }

  /* draw a 0 */
  method void _0() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 28678);
    do Memory.poke(memAddress+192, 30726);
    do Memory.poke(memAddress+224, 31750);
    do Memory.poke(memAddress+256, 28166);
    do Memory.poke(memAddress+288, 26374);
    do Memory.poke(memAddress+320, 25478);
    do Memory.poke(memAddress+352, 25030);
    do Memory.poke(memAddress+384, 28910);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a 1 */
  method void _1() {
    do Memory.poke(memAddress+32, 384);
    do Memory.poke(memAddress+64, 448);
    do Memory.poke(memAddress+96, 480);
    do Memory.poke(memAddress+128, 496);
    do Memory.poke(memAddress+160, 384);
    do Memory.poke(memAddress+192, 384);
    do Memory.poke(memAddress+224, 384);
    do Memory.poke(memAddress+256, 384);
    do Memory.poke(memAddress+288, 384);
    do Memory.poke(memAddress+320, 384);
    do Memory.poke(memAddress+352, 384);
    do Memory.poke(memAddress+384, 384);
    do Memory.poke(memAddress+416, 32766);
    do Memory.poke(memAddress+448, 32766);
    return;
  }

  /* draw a 2 */
  method void _2() {
    do Memory.poke(memAddress+32, 4088);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 28672);
    do Memory.poke(memAddress+192, 14336);
    do Memory.poke(memAddress+224, 3584);
    do Memory.poke(memAddress+256, 1792);
    do Memory.poke(memAddress+288, 448);
    do Memory.poke(memAddress+320, 224);
    do Memory.poke(memAddress+352, 56);
    do Memory.poke(memAddress+384, 28);
    do Memory.poke(memAddress+416, 32766);
    do Memory.poke(memAddress+448, 32766);
    return;
  }

  /* draw a 3 */
  method void _3() {
    do Memory.poke(memAddress+32, 4088);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 28672);
    do Memory.poke(memAddress+192, 14336);
    do Memory.poke(memAddress+224, 8064);
    do Memory.poke(memAddress+256, 8064);
    do Memory.poke(memAddress+288, 14336);
    do Memory.poke(memAddress+320, 28672);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a 4 */
  method void _4() {
    do Memory.poke(memAddress+32, 7680);
    do Memory.poke(memAddress+64, 7936);
    do Memory.poke(memAddress+96, 7040);
    do Memory.poke(memAddress+128, 6592);
    do Memory.poke(memAddress+160, 6368);
    do Memory.poke(memAddress+192, 6256);
    do Memory.poke(memAddress+224, 6200);
    do Memory.poke(memAddress+256, 6172);
    do Memory.poke(memAddress+288, 32766);
    do Memory.poke(memAddress+320, 32766);
    do Memory.poke(memAddress+352, 6144);
    do Memory.poke(memAddress+384, 6144);
    do Memory.poke(memAddress+416, 6144);
    do Memory.poke(memAddress+448, 6144);
    return;
  }

  /* draw a 5 */
  method void _5() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 6);
    do Memory.poke(memAddress+128, 6);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 8190);
    do Memory.poke(memAddress+224, 16380);
    do Memory.poke(memAddress+256, 28672);
    do Memory.poke(memAddress+288, 24576);
    do Memory.poke(memAddress+320, 24576);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28678);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a 6 */
  method void _6() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28678);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 6);
    do Memory.poke(memAddress+192, 8190);
    do Memory.poke(memAddress+224, 16382);
    do Memory.poke(memAddress+256, 28678);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28678);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a 7 */
  method void _7() {
    do Memory.poke(memAddress+32, 32766);
    do Memory.poke(memAddress+64, 32766);
    do Memory.poke(memAddress+96, 14336);
    do Memory.poke(memAddress+128, 7168);
    do Memory.poke(memAddress+160, 3584);
    do Memory.poke(memAddress+192, 1792);
    do Memory.poke(memAddress+224, 896);
    do Memory.poke(memAddress+256, 384);
    do Memory.poke(memAddress+288, 384);
    do Memory.poke(memAddress+320, 384);
    do Memory.poke(memAddress+352, 384);
    do Memory.poke(memAddress+384, 384);
    do Memory.poke(memAddress+416, 384);
    do Memory.poke(memAddress+448, 384);
    return;
  }

  /* draw a 8 */
  method void _8() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 12300);
    do Memory.poke(memAddress+192, 8184);
    do Memory.poke(memAddress+224, 16380);
    do Memory.poke(memAddress+256, 28686);
    do Memory.poke(memAddress+288, 24582);
    do Memory.poke(memAddress+320, 24582);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28678);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }

  /* draw a 9 */
  method void _9() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 24590);
    do Memory.poke(memAddress+192, 32764);
    do Memory.poke(memAddress+224, 32760);
    do Memory.poke(memAddress+256, 24576);
    do Memory.poke(memAddress+288, 24576);
    do Memory.poke(memAddress+320, 24576);
    do Memory.poke(memAddress+352, 24582);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
    return;
  }
}