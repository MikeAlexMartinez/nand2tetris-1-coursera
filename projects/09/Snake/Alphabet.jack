Class Alphabet {

  field int baseAddress;

  constructor Alphabet new() {
    let baseAddress = 16384;
  }

  // a = [8184, 16380, 28686, 24582, 24582, 24582, 32766, 32766, 24582, 24582, 24582, 24582, 24582, 24582]
  // b = [8190, 16382, 28678, 24582, 24582, 28678, 16382, 16382, 28678, 24582, 24582, 28678, 16382, 8190]
  // c = [8184, 16380, 28686, 24582, 6, 6, 6, 6, 6, 6, 24582, 28686, 16380]
  // d = [8190, 16382, 28678, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 28678, 16382, 8190]
  // e = [32766, 32766, 6, 6, 6, 6, 8190, 8190, 6, 6, 6, 6, 32766, 32766, 0]
  // f = [32766, 32766, 6, 6, 6, 6, 8190, 8190, 6, 6, 6, 6, 6, 6]
  // g = [4088, 8188, 14350, 12294, 6, 6, 6, 6, 30726, 30726, 12294, 14350, 8188, 4088]
  // h = [24582, 24582, 24582, 24582, 24582, 24582, 32766, 32766, 24582, 24582, 24582, 24582, 24582, 24582]
  // i = [32766, 32766, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 32766, 32766]
  // j = [32766, 32766, 24576, 24576, 24576, 24576, 24576 , 24576 , 24576 , 24576 , 24582 , 28686 , 16380 , 8184]
  // k = [14342, 7174, 3590, 1798, 902, 462, 254, 510, 910, 1798, 3590, 7174, 14342, 28678]
  // l = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 32766, 32766]
  // m = [7414, 16382, 30622, 25358, 25350, 25350, 25350, 25350, 24582, 24582, 24582, 24582, 24582, 24582]
  // n = [8182, 16382, 28686, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582]
  // o = [8184, 16380, 28686, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 28686, 16380, 8184]
  // p = [8190, 16382, 28678, 24582, 24582, 28678, 16382, 8190, 6, 6, 6, 6, 6, 6]
  // q = [8184, 16380, 28686, 24582, 24582, 24582, 24582, 24582, 24582, 28678, 14342, 15374, 28668, 26616]
  // r = [8190, 16382, 28678, 24582, 24582, 12294, 16382, 32766, 28678, 24582, 24582, 24582, 24582, 24582]
  // s = [8184, 16380, 28686, 24582, 6, 14, 8188, 16376, 28672, 24576, 24582, 28686, 16380, 8184];
  // t = [32766, 32766, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384]
  // u = [24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 24582, 28686, 16380, 8184]
  // v = [24582, 24582, 28686, 28686, 12300, 12300, 14364, 6168, 7224, 3120, 3696, 2016, 960, 384]
  // w = [24582, 24582, 24582, 24582, 24582, 24582, 24582, 24966, 24966, 24966, 24966, 29646, 16380, 7800]
  // x = [24582, 24582, 24582, 28686, 14364, 7224, 4080, 4080, 7224, 14364, 28686, 24582, 24582, 24582]
  // y = [24582, 24582, 24582, 28686, 14364, 7224, 3696, 2016, 960, 384, 384, 384, 384, 384]
  // z = [32766, 32766, 14336, 7168, 3584, 1792, 896, 448, 224, 112, 56, 28, 32766, 32766]
  // : = [0, 960, 960, 960, 960, 0, 0, 0, 0, 960, 960, 960, 960, 0]
  // ! = [960, 960, 960, 960, 960, 960, 960, 960, 384, 384, 0, 960, 960, 960]
  // 0
  method void _0() {
    do Memory.poke(memAddress+32, 8184);
    do Memory.poke(memAddress+64, 16380);
    do Memory.poke(memAddress+96, 28686);
    do Memory.poke(memAddress+128, 24582);
    do Memory.poke(memAddress+160, 28678);
    do Memory.poke(memAddress+192, 30726);
    do Memory.poke(memAddress+224, 31750);
    do Memory.poke(memAddress+256, 28166);
    do Memory.poke(memAddress+288, 26374);
    do Memory.poke(memAddress+320, 25478);
    do Memory.poke(memAddress+352, 25030);
    do Memory.poke(memAddress+384, 28910);
    do Memory.poke(memAddress+416, 16380);
    do Memory.poke(memAddress+448, 8184);
  }
  // 1
  // 2
  // 3
  // 4
  // 5
  // 6
  // 7
  // 8
  // 9

  method void draw(int location, char letter) {
    var int memAddress;
    let memAddress = this.baseAddress + location;
    do Memory.poke(memAddress, 0);
    if (char = "s") { this.drawS}
    do Memory.poke(memAddress+480, 0);
    return;
  }
}