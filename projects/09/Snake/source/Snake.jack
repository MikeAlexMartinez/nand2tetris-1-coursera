/**
 * Snake is reponsible for tracking the position of the
 * snakes head and uses the Queue data structure to 
 * keep track of the position of the snakes tail.
 */
class Snake {

  field Array head;
  field Queue snake;
  field Grid grid;

  constructor Snake new(Grid newGrid) {
    let grid = newGrid;
    let snake = Queue.new(22*14);
    do buildSnake();
    return this;
  }

  method void dispose() {
    do snake.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void buildSnake() {
    var int startCol, endCol;
    var Array snakeSegment;

    let startCol = 15;
    let endCol = 19;
    while(~(startCol > endCol)) {
      let snakeSegment = Array.new(2);
      let snakeSegment[0] = startCol;
      let snakeSegment[1] = 7;
      do updateHead(snakeSegment);
      let startCol = startCol + 1;
    }
    return;
  }

  /* Add new head of snake using snake queue */
  method void updateHead(Array newHead) {
    do snake.pushHead(newHead);
    do grid.updateHead(newHead);
    let head = newHead;
    return;
  }

  /* Removes tail from screen and game, freeing up memory */
  method void updateTail() {
    var Array tail; 
    let tail = snake.takeTail();
    do grid.updateTail(tail);
    do tail.dispose();
    return;
  }

  /* calculates new head of snake and checks for collision */
  method int move(int direction) {
    var int collision;
    var Array newHead;
    let collision = 0;

    let newHead = Array.new(2);

    if (direction = 1) {
      // move up
      let newHead[0] = head[0];
      let newHead[1] = head[1] - 1;
    }

    if (direction = 2) {
      // move down
      let newHead[0] = head[0];
      let newHead[1] = head[1] + 1;
    }

    if (direction = 3) {
      // move left
      let newHead[0] = head[0] - 1;
      let newHead[1] = head[1];
    }

    if (direction = 4) {
      // move right
      let newHead[0] = head[0] + 1;
      let newHead[1] = head[1];
    }

    let collision = grid.detectCollision(newHead);
    if (collision = 0) {
      // nothing interesting has happened, move head and tail
      do updateHead(newHead);
      do updateTail();
    }

    if (collision = 3) {
      // move head
      do updateHead(newHead);

      // don't need to move tail as snake
      // gets longer

      // add new food
      do grid.setFood();
    }

    return collision; 
  }

}