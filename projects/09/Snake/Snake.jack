

class Snake {

  field Grid grid;
  field Array head;    // tracks the position on the grid of the head [col, row]
  field Queue snake;    // Array containing the body of the snake
  field int direction; // the current direction of the snake

  constructor Snake new(int dir) {
    let grid = Grid.new();
    do createSnake();
    let direction = dir;
    return this;
  }

  method void dispose() {
    do grid.dispose();
    do snake.dispose();
    do head.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void createSnake() {
    var int startCol, endCol;
    var Array snakeSegment;

    // Create snake and take memory for max length
    // of snake
    let snake = Queue.new(22*14);

    let startCol = 15;
    let endCol = 19;
    while(~(startCol > endCol)) {
      let snakeSegment = Array.new(2);
      let snakeSegment[0] = startCol;
      let snakeSegment[1] = 7;
      do updateHead(snakeSegment);
      let startCol = startCol + 1;
    }
    return;
  }

  method void updateHead(Array newHead) {
    do snake.pushHead(newHead);
    do grid.updateHead(newHead);
    let head = newHead;
    return;
  }

  method void updateTail() {
    var Array tail; 
    let tail = snake.takeTail();
    do grid.updateTail(tail);
    do tail.dispose();
    return;
  }

  /**
   * Change direction
   * 1 = up, 2 = down, 3 = left, 4 = right
   *
   * won't change direction if newDirection is
   * inverse of current direction
   */
  method void updateDirection(int newDirection) {
    if (~(direction = newDirection) &
      (
        ~(direction = 1 & newDirection = 2) &
        ~(newDirection = 1 & direction = 2) &
        ~(direction = 3 & newDirection = 4) &
        ~(newDirection = 4 & direction = 3)
      )
    ) {
      let direction = newDirection;
    }
    return;
  }

  method int move() {
    var int collision;
    var Array newHead;

    let newHead = Array.new(2);

    if (direction = 1) {
      // move up
      let newHead[0] = head[0];
      let newHead[1] = head[1] + 1;
    }

    if (direction = 2) {
      // move down
      let newHead[0] = head[0];
      let newHead[1] = head[1] - 1;
    }

    if (direction = 3) {
      // move left
      let newHead[0] = head[0] - 1;
      let newHead[1] = head[1];
    }

    if (direction = 4) {
      // move right
      let newHead[0] = head[0] + 1;
      let newHead[1] = head[1];
    }

    let collision = grid.detectCollision(head);

    if (collision = 0) {
      // nothing interesting has happened, move head and tail
      do updateHead(newHead);
      do updateTail();
    } else {
      if (collision = 3) {
        // move head
        do updateHead(newHead);

        // don't need to move tail as snake
        // gets longer

        // add new food
        do grid.setFood();
      }
    }

    do Sys.wait(5000);
    return collision;
  }
}