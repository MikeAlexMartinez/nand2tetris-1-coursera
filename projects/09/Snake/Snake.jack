

class Snake {

  field Grid grid;
  field Array head;    // tracks the position on the grid of the head [col, row]
  field Array tail;    // tracks the position on the grid of the snake [col, row]
  field int direction; // the current direction of the snake

  constructor Snake new(int dir) {
    let grid = Grid.new();
    let head = Array.new(2);
    let tail = Array.new(2);
    do setHead(18, 7);
    do setTail(14, 7);
    let tail = Array.new(2);
    let direction = dir;
    return this;
  }

  method void dispose() {
    do grid.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void setHead(int col, int row) {
    let head[0] = col;
    let head[1] = row;
    return;
  }

  method void setTail(int col, int row) {
    let tail[0] = col;
    let tail[1] = row;
    return;
  }

  /**
   * Change direction
   * 1 = up, 2 = down, 3 = left, 4 = right
   *
   * won't change direction if newDirection is
   * inverse of current direction
   */
  method void updateDirection(int newDirection) {
    if (~(direction = newDirection) &
      (
        ~(direction = 1 & newDirection = 2) &
        ~(newDirection = 1 & direction = 2) &
        ~(direction = 3 & newDirection = 4) &
        ~(newDirection = 4 & direction = 3)
      )
    ) {
      let direction = newDirection;
    }
    return;
  }

  method int move() {
    var int collision;

    if (direction = 1) {
      // move up
      let head[1] = head[1] - 1;
    }

    if (direction = 2) {
      // move down
      let head[1] = head[1] + 1;
    }

    if (direction = 3) {
      // move left
      let head[0] = head[0] - 1;
    }

    if (direction = 4) {
      // move right
      let head[0] = head[0] + 1;
    }

    let collision = grid.detectCollision(head);

    if (collision = 0) {
      // nothing has happened, move head and tail
      do grid.updateHead(head);
      do grid.updateTail(tail);
    } else {
      if (collision = 3) {
        // move head
        do grid.updateHead(head);
        // don't need to move tail as snake
        // gets longer

        // add new food
        do grid.setFood();
      }
    }

    do Sys.wait(5000);
    return collision;
  }
}